name: PR Checks

on:
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: us-west-2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # ========================================================================
  # Backend Tests
  # ========================================================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'backend/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        working-directory: backend
        run: uv venv

      - name: Install dependencies
        working-directory: backend
        run: |
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov pytest-asyncio boto3-stubs[essential]

      - name: Run Black formatter check
        working-directory: backend
        run: |
          source .venv/bin/activate
          black --check functions/ lambda_layer/python/lib/ infrastructure/

      - name: Run Pylint
        working-directory: backend
        run: |
          source .venv/bin/activate
          PYTHONPATH="lambda_layer/python:$PYTHONPATH" pylint functions/**/*.py lambda_layer/python/lib/*.py infrastructure/**/*.py --disable=all --enable=E,F --score=yes || true

      - name: Run Mypy type checking
        working-directory: backend
        run: |
          source .venv/bin/activate
          PATH=".venv/bin:$PATH" MYPYPATH="lambda_layer/python" mypy functions/ lambda_layer/python/lib/ infrastructure/ --ignore-missing-imports --pretty || true

      - name: Run unit tests
        working-directory: backend
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=functions --cov=lambda_layer --cov-report=xml --cov-report=term

      - name: Upload coverage to PR
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false

  # ========================================================================
  # Frontend Tests
  # ========================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'frontend/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Run type checking
        working-directory: frontend
        run: npm run typecheck || true

      - name: Run unit tests
        working-directory: frontend
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to PR
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: false

      - name: Build check
        working-directory: frontend
        env:
          VITE_API_BASE_URL: https://a9np4bbum8.execute-api.us-west-2.amazonaws.com/dev
          VITE_COGNITO_USER_POOL_ID: us-west-2_DeQrm3GHa
          VITE_COGNITO_CLIENT_ID: pn75f7u9cqsunkje417vtqvvf
          VITE_AWS_REGION: us-west-2
        run: npm run build

  # ========================================================================
  # Security Checks
  # ========================================================================
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ========================================================================
  # Dependency Checks
  # ========================================================================
  dependency-checks:
    name: Dependency Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for npm vulnerabilities
        working-directory: frontend
        run: |
          npm ci
          npm audit --audit-level=high || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Check for Python vulnerabilities
        working-directory: backend
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install safety
          safety check || true

  # ========================================================================
  # CDK Synth Check
  # ========================================================================
  cdk-synth-check:
    name: CDK Synth Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'backend/infrastructure/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Install Python dependencies
        working-directory: backend
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt

      - name: CDK Synth (Dev)
        working-directory: backend/infrastructure
        run: |
          source ../.venv/bin/activate
          cdk synth --all -c env=dev --region us-west-2

      - name: CDK Synth (Staging)
        working-directory: backend/infrastructure
        run: |
          source ../.venv/bin/activate
          cdk synth --all -c env=staging --region us-west-2

      - name: CDK Synth (Prod)
        working-directory: backend/infrastructure
        run: |
          source ../.venv/bin/activate
          cdk synth --all -c env=prod --region us-west-2

  # ========================================================================
  # PR Summary
  # ========================================================================
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-checks, dependency-checks, cdk-synth-check]
    if: always()

    steps:
      - name: PR Check Results
        run: |
          echo "## PR Check Results"
          echo ""
          echo "✅ Backend Tests: ${{ needs.backend-tests.result }}"
          echo "✅ Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "✅ Security Checks: ${{ needs.security-checks.result }}"
          echo "✅ Dependency Checks: ${{ needs.dependency-checks.result }}"
          echo "✅ CDK Synth Check: ${{ needs.cdk-synth-check.result }}"

      - name: Check if all tests passed
        run: |
          if [ "${{ needs.backend-tests.result }}" == "failure" ] || \
             [ "${{ needs.frontend-tests.result }}" == "failure" ] || \
             [ "${{ needs.security-checks.result }}" == "failure" ] || \
             [ "${{ needs.cdk-synth-check.result }}" == "failure" ]; then
            echo "❌ Some checks failed. Please fix before merging."
            exit 1
          fi
          echo "✅ All checks passed!"
